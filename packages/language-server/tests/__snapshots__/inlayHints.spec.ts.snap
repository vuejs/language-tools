// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Definitions > Destructured props 1`] = `
"
			<script setup lang="ts">
			import { watch } from 'vue';

			const { foo, bar, ...props } = defineProps<{
				foo: string;
				bar: string;
				baz: string;
			}>();

			type foo = foo[string] & typeof [props.]foo;

			interface foo extends (typeof [props.]foo) {
				foo: string;
				foo(foo: string): void;
				foo: (foo: string) => void;
			}

			const obj = {
				foo: [props.]foo,
				[[props.]foo]: '',
				foo[: props.foo],
				foo(foo) { },
				foo: function (foo) { },
				get bar() { return this.foo; },
				set bar(val) { this.foo = val; }
			};

			function func(foo) { }

			class cls {
				foo: string = [props.]foo;
				constructor(foo) { }
			}

			for (const char of [props.]foo) { }

			try { } catch (foo) { }

			watch(() => [props.]foo, (foo) => {
				console.log(foo, [props.]bar, props.baz);
			});
			</script>
		"
`;

exports[`Definitions > Inline handler leading 1`] = `
"
			<script setup lang="ts">
			let a = 0;
			</script>

			<template>
				<div @click="[$event =>]a = 1"></div>
			</template>
		"
`;

exports[`Definitions > Missing props 1`] = `
"
			<script setup lang="ts">
			import Foo from './foo.vue';
			</script>

			<template>
				<Foo[foo!]></Foo>
			</template>
		"
`;

exports[`Definitions > Options wrapper 1`] = `
"
			<script>
			export default [(await import('vue')).defineComponent(]{}[)];
			</script>
		"
`;
