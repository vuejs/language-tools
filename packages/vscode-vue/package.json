{
	"private": true,
	"name": "volar",
	"version": "1.3.4",
	"repository": {
		"type": "git",
		"url": "https://github.com/vuejs/language-tools.git",
		"directory": "packages/vscode-vue"
	},
	"categories": [
		"Programming Languages"
	],
	"sponsor": {
		"url": "https://github.com/sponsors/johnsoncodehk"
	},
	"icon": "images/icon.png",
	"displayName": "Vue Language Features (Volar)",
	"description": "Language support for Vue 3",
	"author": "johnsoncodehk",
	"publisher": "Vue",
	"engines": {
		"vscode": "^1.67.0"
	},
	"activationEvents": [
		"onLanguage:vue",
		"onLanguage:markdown",
		"onLanguage:html",
		"onLanguage:javascript",
		"onLanguage:typescript",
		"onLanguage:javascriptreact",
		"onLanguage:typescriptreact"
	],
	"main": "./client.js",
	"browser": "./web.js",
	"capabilities": {
		"virtualWorkspaces": {
			"supported": "limited",
			"description": "Install https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.vscode-typescript-web to have IntelliSense for .vue files in Web IDE."
		},
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "%volar.workspaceTrust.description%",
			"restrictedConfigurations": [
				"typescript.tsdk",
				"typescript.tsserver.pluginPaths",
				"typescript.npm"
			]
		}
	},
	"contributes": {
		"jsonValidation": [
			{
				"fileMatch": "tsconfig.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "tsconfig.*.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "tsconfig-*.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "typings.json",
				"url": "https://json.schemastore.org/typings"
			},
			{
				"fileMatch": ".bowerrc",
				"url": "https://json.schemastore.org/bowerrc"
			},
			{
				"fileMatch": ".babelrc",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": ".babelrc.json",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": "babel.config.json",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": "jsconfig.json",
				"url": "https://json.schemastore.org/jsconfig"
			},
			{
				"fileMatch": "jsconfig.*.json",
				"url": "https://json.schemastore.org/jsconfig"
			},
			{
				"fileMatch": "tsconfig.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "tsconfig-*.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "tsconfig.*.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig-*.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig.*.json",
				"url": "./dist/schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "tsconfig.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			},
			{
				"fileMatch": "tsconfig-*.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			},
			{
				"fileMatch": "tsconfig.*.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			},
			{
				"fileMatch": "jsconfig.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			},
			{
				"fileMatch": "jsconfig-*.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			},
			{
				"fileMatch": "jsconfig.*.json",
				"url": "./dist/schemas/vue-tsconfig.deprecated.schema.json"
			}
		],
		"semanticTokenScopes": [
			{
				"language": "vue",
				"scopes": {
					"component": [
						"support.class.component.vue"
					]
				}
			},
			{
				"language": "markdown",
				"scopes": {
					"component": [
						"support.class.component.vue"
					]
				}
			},
			{
				"language": "html",
				"scopes": {
					"component": [
						"support.class.component.vue"
					]
				}
			}
		],
		"languages": [
			{
				"id": "vue",
				"extensions": [
					".vue"
				],
				"configuration": "./languages/vue-language-configuration.json"
			},
			{
				"id": "markdown",
				"configuration": "./languages/markdown-language-configuration.json"
			},
			{
				"id": "html",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "jade",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "plaintext",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "vue-injection-markdown"
			},
			{
				"id": "vue-directives"
			},
			{
				"id": "vue-interpolations"
			},
			{
				"id": "vue-sfc-style-variable-injection"
			}
		],
		"grammars": [
			{
				"language": "vue",
				"scopeName": "source.vue",
				"path": "./syntaxes/vue.tmLanguage.json",
				"embeddedLanguages": {
					"source.vue": "vue",
					"text": "plaintext",
					"text.html.derivative": "html",
					"text.html.markdown": "markdown",
					"text.pug": "jade",
					"source.css": "css",
					"source.css.scss": "scss",
					"source.css.less": "less",
					"source.sass": "sass",
					"source.stylus": "stylus",
					"source.postcss": "postcss",
					"source.js": "javascript",
					"source.ts": "typescript",
					"source.js.jsx": "javascriptreact",
					"source.tsx": "typescriptreact",
					"meta.tag.js": "jsx-tags",
					"meta.tag.tsx": "jsx-tags",
					"meta.tag.without-attributes.js": "jsx-tags",
					"meta.tag.without-attributes.tsx": "jsx-tags",
					"source.json": "json",
					"source.json.comments": "jsonc",
					"source.json5": "json5",
					"source.yaml": "yaml",
					"source.toml": "toml",
					"source.graphql": "graphql"
				},
				"unbalancedBracketScopes": [
					"keyword.operator.relational",
					"storage.type.function.arrow",
					"keyword.operator.bitwise.shift",
					"meta.brace.angle",
					"punctuation.definition.tag"
				]
			},
			{
				"language": "vue-injection-markdown",
				"scopeName": "markdown.vue.codeblock",
				"path": "./syntaxes/markdown-vue.json",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.vue": "vue",
					"source.vue": "vue",
					"text": "plaintext",
					"text.html.derivative": "html",
					"text.html.markdown": "markdown",
					"text.pug": "jade",
					"source.css": "css",
					"source.css.scss": "scss",
					"source.css.less": "less",
					"source.sass": "sass",
					"source.stylus": "stylus",
					"source.postcss": "postcss",
					"source.js": "javascript",
					"source.ts": "typescript",
					"source.js.jsx": "javascriptreact",
					"source.tsx": "typescriptreact",
					"meta.tag.js": "jsx-tags",
					"meta.tag.tsx": "jsx-tags",
					"meta.tag.without-attributes.js": "jsx-tags",
					"meta.tag.without-attributes.tsx": "jsx-tags",
					"source.json": "json",
					"source.json.comments": "jsonc",
					"source.json5": "json5",
					"source.yaml": "yaml",
					"source.toml": "toml",
					"source.graphql": "graphql"
				}
			},
			{
				"language": "vue-directives",
				"scopeName": "vue.directives",
				"path": "./syntaxes/vue-directives.json",
				"injectTo": [
					"source.vue",
					"text.html.markdown",
					"text.html.derivative",
					"text.pug"
				]
			},
			{
				"language": "vue-interpolations",
				"scopeName": "vue.interpolations",
				"path": "./syntaxes/vue-interpolations.json",
				"injectTo": [
					"source.vue",
					"text.html.markdown",
					"text.html.derivative",
					"text.pug"
				]
			},
			{
				"language": "vue-sfc-style-variable-injection",
				"scopeName": "vue.sfc.style.variable.injection",
				"path": "./syntaxes/vue-sfc-style-variable-injection.json",
				"injectTo": [
					"source.vue"
				]
			}
		],
		"breakpoints": [
			{
				"language": "vue"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Volar",
			"properties": {
				"typescript.tsdk": {
					"type": "string"
				},
				"vue-semantic-server.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"vue-syntactic-server.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"volar.vueserver.configFilePath": {
					"type": "string",
					"default": "./volar.config.js",
					"description": "Path to volar.config.js."
				},
				"volar.vueserver.maxFileSize": {
					"type": "number",
					"default": 20971520,
					"description": "Maximum file size for Vue Server to load. (default: 20MB)"
				},
				"volar.vueserver.petiteVue.processHtmlFile": {
					"type": "boolean",
					"default": false
				},
				"volar.vueserver.vitePress.processMdFile": {
					"type": "boolean",
					"default": false
				},
				"volar.vueserver.json.customBlockSchemaUrls": {
					"type": "object"
				},
				"volar.vueserver.textDocumentSync": {
					"type": "string",
					"default": "incremental",
					"enum": [
						"incremental",
						"full",
						"none"
					],
					"enumDescriptions": [
						"Documents are synced by sending the full content on open. After that only incremental updates to the document are send.",
						"Documents are synced by always sending the full content of the document.",
						"Documents should not be synced at all."
					],
					"description": "Defines how the host (editor) should sync document changes to the language server. SFC incremental parser only working when config \"incremental\"."
				},
				"volar.vueserver.diagnosticModel": {
					"type": "string",
					"default": "push",
					"enum": [
						"push",
						"pull"
					],
					"enumDescriptions": [
						"Diagnostic push by language server.",
						"Diagnostic pull by language client."
					],
					"description": "Diagnostic update model."
				},
				"volar.vueserver.maxOldSpaceSize": {
					"type": [
						"number",
						"null"
					],
					"default": null,
					"description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it."
				},
				"volar.vueserver.noProjectReferences": {
					"type": "boolean",
					"default": false,
					"description": "Ignore project references settings of tsconfig in language server for resolve issue #1916."
				},
				"volar.vueserver.reverseConfigFilePriority": {
					"type": "boolean",
					"default": false,
					"description": "Reverse priority for tsconfig pickup."
				},
				"volar.vueserver.disableFileWatcher": {
					"type": "boolean",
					"default": false,
					"description": "Disable file watcher in language server for better performance."
				},
				"volar.vueserver.additionalExtensions": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "List any additional file extensions that should be processed as Vue files (requires restart)."
				},
				"volar.vueserver.fullCompletionList": {
					"type": "boolean",
					"default": false,
					"description": "Enable this option if you want to get complete CompletionList in language client. (Disable for better performance)"
				},
				"volar.codeLens.references": {
					"type": "boolean",
					"default": true,
					"description": "[references] code lens."
				},
				"volar.inlayHints.missingRequiredProps": {
					"type": "boolean",
					"default": false,
					"description": "Show inlay hints for missing required props."
				},
				"volar.inlayHints.eventArgumentInInlineHandlers": {
					"type": "boolean",
					"default": false,
					"description": "Show inlay hints for event argument in inline handlers."
				},
				"volar.icon.splitEditors": {
					"type": "boolean",
					"default": false,
					"description": "Show split editor icon in title area of editor."
				},
				"volar.doctor.status": {
					"type": "boolean",
					"default": true,
					"description": "Show known problems in status bar."
				},
				"volar.autoWrapParentheses": {
					"type": "boolean",
					"default": true,
					"description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520."
				},
				"volar.autoCompleteRefs": {
					"type": "boolean",
					"default": false,
					"description": "Auto-complete Ref value with `.value`."
				},
				"volar.addSpaceBetweenDoubleCurlyBrackets": {
					"type": "boolean",
					"default": true,
					"description": "Auto add space between double curly brackets: {{|}} -> {{ | }}"
				},
				"volar.format.initialIndent": {
					"type": "object",
					"description": "Whether to have initial indent.",
					"default": {
						"html": true
					},
					"properties": {
						"html": {
							"type": "boolean",
							"default": true
						},
						"typescript": {
							"type": "boolean",
							"default": false
						},
						"javascript": {
							"type": "boolean",
							"default": false
						},
						"typescriptreact": {
							"type": "boolean",
							"default": false
						},
						"javascriptreact": {
							"type": "boolean",
							"default": false
						},
						"css": {
							"type": "boolean",
							"default": false
						},
						"scss": {
							"type": "boolean",
							"default": false
						},
						"less": {
							"type": "boolean",
							"default": false
						},
						"sass": {
							"type": "boolean",
							"default": false
						},
						"jade": {
							"type": "boolean",
							"default": false
						},
						"json": {
							"type": "boolean",
							"default": false
						},
						"jsonc": {
							"type": "boolean",
							"default": false
						},
						"json5": {
							"type": "boolean",
							"default": false
						}
					}
				},
				"volar.takeOverMode.extension": {
					"type": "string",
					"default": "Vue.volar",
					"description": "The extension that take over language support for *.ts."
				},
				"volar.completion.preferredTagNameCase": {
					"type": "string",
					"enum": [
						"auto-kebab",
						"auto-pascal",
						"kebab",
						"pascal"
					],
					"enumDescriptions": [
						"Auto Detect from Content (Preferred <kebab-case>)",
						"Auto Detect from Content (Preferred <PascalCase>)",
						"<kebab-case>",
						"<PascalCase>"
					],
					"default": "auto-pascal",
					"description": "Preferred tag name case."
				},
				"volar.completion.preferredAttrNameCase": {
					"type": "string",
					"enum": [
						"auto-kebab",
						"auto-camel",
						"kebab",
						"camel"
					],
					"enumDescriptions": [
						"Auto Detect from Content (Preferred :kebab-case=\"...\")",
						"Auto Detect from Content (Preferred :camelCase=\"...\")",
						":kebab-case=\"...\"",
						":camelCase=\"...\""
					],
					"default": "auto-kebab",
					"description": "Preferred attr name case."
				},
				"volar.completion.normalizeComponentImportName": {
					"type": "boolean",
					"default": true,
					"description": "Normalize import name for auto import. (\"myCompVue\" -> \"MyComp\")"
				},
				"volar.splitEditors.layout.left": {
					"type": "array",
					"default": [
						"script",
						"scriptSetup",
						"styles"
					]
				},
				"volar.splitEditors.layout.right": {
					"type": "array",
					"default": [
						"template",
						"customBlocks"
					]
				},
				"volar.updateImportsOnFileMove.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enabled update imports on file move."
				},
				"volar.diagnostics.delay": {
					"type": "number",
					"default": 200,
					"description": "Delay time for diagnostics."
				}
			}
		},
		"commands": [
			{
				"command": "volar.action.restartServer",
				"title": "Restart Vue server",
				"category": "Volar"
			},
			{
				"command": "volar.action.reloadProject",
				"title": "Reload Project",
				"category": "Volar"
			},
			{
				"command": "volar.action.doctor",
				"title": "Doctor",
				"category": "Volar"
			},
			{
				"command": "volar.action.writeVirtualFiles",
				"title": "Write Virtual Files",
				"category": "Volar (Debug)"
			},
			{
				"command": "volar.action.showVirtualFiles",
				"title": "Show Virtual Files",
				"category": "Volar (Debug)"
			},
			{
				"command": "volar.action.serverStats",
				"title": "Server Stats",
				"category": "Volar (Debug)"
			},
			{
				"command": "volar.action.showComponentMeta",
				"title": "Show Component Meta",
				"category": "Volar"
			},
			{
				"command": "volar.action.splitEditors",
				"title": "Split <script>, <template>, <style> Editors",
				"category": "Volar",
				"icon": "images/split-editors.png"
			},
			{
				"command": "volar.selectTypeScriptVersion",
				"title": "Select TypeScript Version...",
				"category": "Volar"
			},
			{
				"command": "volar.vue.findAllFileReferences",
				"title": "Vue: Find File References",
				"category": "Volar"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "volar.action.restartServer",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.reloadProject",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.doctor",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.writeVirtualFiles",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.showVirtualFiles",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.splitEditors",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.selectTypeScriptVersion",
					"when": "volar.activated"
				}
			],
			"editor/title": [
				{
					"command": "volar.action.splitEditors",
					"when": "resourceLangId == vue && config.volar.icon.splitEditors",
					"group": "navigation"
				}
			],
			"explorer/context": [
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == typescript",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == typescriptreact",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == javascript",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == javascriptreact",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == vue",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == html",
					"group": "4_search"
				}
			]
		},
		"problemMatchers": [
			{
				"name": "vite",
				"label": "Vite problems",
				"pattern": {
					"regexp": ""
				},
				"background": {
					"activeOnStart": true,
					"beginsPattern": "restarting server...$",
					"endsPattern": "\\s*ready in|server restarted."
				}
			}
		]
	},
	"scripts": {
		"prebuild": "cd ../.. && npm run build",
		"build": "node scripts/build",
		"watch": "npm run build -- --watch",
		"prepack": "npm run prebuild && npm run build -- --minify",
		"pack": "npm run prepack && vsce package",
		"release": "npm run prepack && vsce publish",
		"release:next": "npm run release -- --pre-release",
		"bundle-size": "npm run prepack:bundle-size && esbuild-visualizer --metadata ./meta.json && open ./stats.html"
	},
	"devDependencies": {
		"@types/semver": "^7.3.13",
		"@types/vscode": "1.67.0",
		"@volar/source-map": "1.4.0-alpha.4",
		"@volar/vscode": "1.4.0-alpha.4",
		"@volar/vue-language-core": "1.3.4",
		"@volar/vue-language-server": "1.3.4",
		"esbuild": "0.15.18",
		"esbuild-plugin-copy": "latest",
		"esbuild-visualizer": "latest",
		"semver": "^7.3.8",
		"typesafe-path": "^0.2.2",
		"vsce": "latest",
		"vscode-languageclient": "^8.1.0",
		"vscode-nls": "^5.2.0"
	}
}
