// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`vue-tsc-dts > Input: #4577/main.vue, Output: #4577/main.vue.d.ts 1`] = `
"export type BaseRow = {
    value: string;
};
declare const _default: <Row extends BaseRow>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>, never> & {
        nonGeneric: string;
        rows: Row[];
    } & Partial<{}>> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {
        default?: (props: {
            row: Row;
        }) => any;
    };
    emit: {};
}>) => import("vue").VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
"
`;

exports[`vue-tsc-dts > Input: class-slots/component.vue, Output: class-slots/component.vue.d.ts 1`] = `
"import type { VNode } from 'vue';
declare const _default: new () => {
    $slots: {
        default: (props: {
            num: number;
        }) => VNode[];
        foo: (props: {
            str: string;
        }) => VNode[];
    };
};
export default _default;
"
`;

exports[`vue-tsc-dts > Input: empty-component/component.vue, Output: empty-component/component.vue.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: empty-component/custom-extension-component.cext, Output: empty-component/custom-extension-component.cext.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: events/component-class.vue, Output: events/component-class.vue.d.ts 1`] = `
"type __VLS_Emit = {
    /** Emitted when foo... */
    (evt: "foo", value: string): void;
};
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: __VLS_Emit;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: events/component-generic.vue, Output: events/component-generic.vue.d.ts 1`] = `
"declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onFoo?: (value: string) => any;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>, "onFoo"> & {} & Partial<{}>> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {};
    emit: (evt: "foo", value: string) => void;
}>) => import("vue").VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
"
`;

exports[`vue-tsc-dts > Input: generic/component.vue, Output: generic/component.vue.d.ts 1`] = `
"declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly "onUpdate:title"?: (value: string) => any;
        readonly onBar?: (data: number) => any;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>, "onUpdate:title" | "onBar"> & ({
        foo: number;
    } & {
        title?: string;
    }) & Partial<{}>> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        baz: number;
    }>): void;
    attrs: any;
    slots: {
        default?: (props: {
            foo: number;
        }) => any;
    };
    emit: ((e: "bar", data: number) => void) & ((evt: "update:title", value: string) => void);
}>) => import("vue").VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
"
`;

exports[`vue-tsc-dts > Input: generic/custom-extension-component.cext, Output: generic/custom-extension-component.cext.d.ts 1`] = `
"declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly "onUpdate:title"?: (value: string) => any;
        readonly onBar?: (data: number) => any;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>, "onUpdate:title" | "onBar"> & ({
        foo: number;
    } & {
        title?: string;
    }) & Partial<{}>> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        baz: number;
    }>): void;
    attrs: any;
    slots: {
        default?: (props: {
            foo: number;
        }) => any;
    };
    emit: ((e: "bar", data: number) => void) & ((evt: "update:title", value: string) => void);
}>) => import("vue").VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
"
`;

exports[`vue-tsc-dts > Input: generic/main.vue, Output: generic/main.vue.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: non-component/component.ts, Output: non-component/component.d.ts 1`] = `
"declare const _default: {};
export default _default;
"
`;

exports[`vue-tsc-dts > Input: options-api/component.ts, Output: options-api/component.d.ts 1`] = `
"interface SubmitPayload {
    /**
     * email of user
     */
    email: string;
    /**
     * password of same user
     */
    password: string;
}
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {
        /**
         * Default number
         */
        numberDefault: {
            type: NumberConstructor;
            default: number;
        };
        /**
         * Default function Object
         */
        objectDefault: {
            type: ObjectConstructor;
            default: () => {
                foo: string;
            };
        };
        /**
         * Default function Array
         */
        arrayDefault: {
            type: ArrayConstructor;
            default: () => number[];
        };
        /**
         * Default function more complex
         */
        complexDefault: {
            type: ArrayConstructor;
            default: (props: any) => any[];
        };
    };
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: {
        submit: ({ email, password }: SubmitPayload) => boolean;
    };
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-events/component.vue, Output: reference-type-events/component.vue.d.ts 1`] = `
"import { MyEvents } from './my-events';
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: MyEvents;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-events/my-events.ts, Output: reference-type-events/my-events.d.ts 1`] = `
"/**
 * Emitted when the foo property is changed.
 */
type MyEventsFoo = 'foo';
export interface MyEvents {
    (event: MyEventsFoo, data?: {
        foo: string;
    }): void;
    (event: 'bar', value: {
        arg1: number;
        arg2?: any;
    }): void;
    (e: 'baz'): void;
}
export {};
"
`;

exports[`vue-tsc-dts > Input: reference-type-exposed/component.vue, Output: reference-type-exposed/component.vue.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {
        /**
         * a counter string
         */
        counter: import("vue").Ref<string, string>;
    };
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-model/component.vue, Output: reference-type-model/component.vue.d.ts 1`] = `
"type __VLS_PublicProps = {
    /**
     * required number modelValue
     */
    modelValue: number;
    /**
     * optional boolean foo with default false
     */
    'foo'?: boolean;
    /**
     * optional string bar with lazy and trim modifiers
     */
    'bar'?: string;
    'barModifiers'?: Partial<Record<'lazy' | 'trim', true>>;
};
type __VLS_ModelEmit = {
    'update:modelValue': [value: number];
    'update:foo': [value: boolean];
    'update:bar': [value: string | undefined];
};
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: __VLS_PublicProps;
    __typeEmits: __VLS_ModelEmit;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-props/component.vue, Output: reference-type-props/component.vue.d.ts 1`] = `
"import { MyProps } from './my-props';
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: MyProps;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: {
        bar: number;
        baz: () => string[];
    };
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-props/component-destructure.vue, Output: reference-type-props/component-destructure.vue.d.ts 1`] = `
"type __VLS_Props = {
    text: string;
};
declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: __VLS_Props;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-props/component-js.vue, Output: reference-type-props/component-js.vue.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {
        foo: {
            type: StringConstructor;
            required: true;
        };
        bar: {
            type: StringConstructor;
            default: string;
        };
        baz: {
            type: StringConstructor;
        };
        xfoo: {
            readonly type: StringConstructor;
            readonly required: true;
        };
        xbar: {
            readonly type: StringConstructor;
            readonly value: "";
        };
        xbaz: {
            readonly type: StringConstructor;
        };
    };
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-props/component-js-setup.vue, Output: reference-type-props/component-js-setup.vue.d.ts 1`] = `
"declare const _default: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {
        foo: {
            type: StringConstructor;
            required: true;
        };
        bar: {
            type: StringConstructor;
            default: string;
        };
        baz: {
            type: StringConstructor;
        };
        xfoo: {
            readonly type: StringConstructor;
            readonly required: true;
        };
        xbar: {
            readonly type: StringConstructor;
            readonly value: "";
        };
        xbaz: {
            readonly type: StringConstructor;
        };
        /**
         * The hello property.
         *
         * @since v1.0.0
         */
        hello: {
            type: StringConstructor;
            default: string;
        };
        numberOrStringProp: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        arrayProps: {
            type: ArrayConstructor;
            default: () => number[];
        };
    };
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
export default _default;
"
`;

exports[`vue-tsc-dts > Input: reference-type-props/my-props.ts, Output: reference-type-props/my-props.d.ts 1`] = `
"export interface MyNestedProps {
    /**
     * nested prop documentation
     */
    nestedProp: string;
}
export interface MyIgnoredNestedProps {
    nestedProp: string;
}
export interface MyNestedRecursiveProps {
    recursive: MyNestedRecursiveProps;
}
declare enum MyEnum {
    Small = 0,
    Medium = 1,
    Large = 2
}
declare const categories: readonly ["Uncategorized", "Content", "Interaction", "Display", "Forms", "Addons"];
type MyCategories = typeof categories[number];
export interface MyProps {
    /**
   * string foo
   *
   * @default "rounded"
   * @since v1.0.0
   * @see https://vuejs.org/
   * @example
   * \`\`\`vue
   * <template>
   *   <component foo="straight" />
   * </template>
   * \`\`\`
     */
    foo: string;
    /**
     * optional number bar
     */
    bar?: number;
    /**
     * string array baz
     */
    baz?: string[];
    /**
     * required union type
     */
    union: string | number;
    /**
     * optional union type
     */
    unionOptional?: string | number;
    /**
     * required nested object
     */
    nested: MyNestedProps;
    /**
     * required nested object with intersection
     */
    nestedIntersection: MyNestedProps & {
        /**
         * required additional property
         */
        additionalProp: string;
    };
    /**
     * optional nested object
     */
    nestedOptional?: MyNestedProps | MyIgnoredNestedProps;
    /**
     * required array object
     */
    array: MyNestedProps[];
    /**
     * optional array object
     */
    arrayOptional?: MyNestedProps[];
    /**
     * enum value
     */
    enumValue: MyEnum;
    /**
     * literal type alias that require context
     */
    literalFromContext: MyCategories;
    inlined: {
        foo: string;
    };
    recursive: MyNestedRecursiveProps;
}
export declare const StringRequired: {
    readonly type: StringConstructor;
    readonly required: true;
};
export declare const StringEmpty: {
    readonly type: StringConstructor;
    readonly value: "";
};
export declare const StringUndefined: {
    readonly type: StringConstructor;
};
export {};
"
`;

exports[`vue-tsc-dts > Input: template-slots/component.vue, Output: template-slots/component.vue.d.ts 1`] = `
"declare var __VLS_1: {}, __VLS_3: {
    num: number;
}, __VLS_5: {
    str: string;
}, __VLS_7: {
    num: number;
    str: string;
};
type __VLS_Slots = {} & {
    'no-bind'?: (props: typeof __VLS_1) => any;
} & {
    default?: (props: typeof __VLS_3) => any;
} & {
    'named-slot'?: (props: typeof __VLS_5) => any;
} & {
    vbind?: (props: typeof __VLS_7) => any;
};
declare const __VLS_component: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
"
`;

exports[`vue-tsc-dts > Input: template-slots/component-define-slots.vue, Output: template-slots/component-define-slots.vue.d.ts 1`] = `
"import type { VNode } from 'vue';
type __VLS_Slots = {
    default: (props: {
        num: number;
    }) => VNode[];
    'named-slot': (props: {
        str: string;
    }) => VNode[];
    vbind: (props: {
        num: number;
        str: string;
    }) => VNode[];
    'no-bind': () => VNode[];
};
declare const __VLS_component: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
"
`;

exports[`vue-tsc-dts > Input: template-slots/component-destructuring.vue, Output: template-slots/component-destructuring.vue.d.ts 1`] = `
"type __VLS_Slots = {
    bottom: (props: {
        num: number;
    }) => any[];
};
declare const __VLS_component: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
"
`;

exports[`vue-tsc-dts > Input: template-slots/component-no-script.vue, Output: template-slots/component-no-script.vue.d.ts 1`] = `
"declare var __VLS_1: {}, __VLS_3: {
    num: number;
}, __VLS_5: {
    str: string;
}, __VLS_7: {
    num: number;
    str: string;
};
type __VLS_Slots = {} & {
    'no-bind'?: (props: typeof __VLS_1) => any;
} & {
    default?: (props: typeof __VLS_3) => any;
} & {
    'named-slot'?: (props: typeof __VLS_5) => any;
} & {
    vbind?: (props: typeof __VLS_7) => any;
};
declare const __VLS_component: import("vue").DefineComponent2<{
    setup(): {};
    data(): {};
    props: {};
    computed: {};
    methods: {};
    mixins: {}[];
    extends: {};
    emits: string[];
    slots: {};
    inject: {};
    components: {};
    directives: {};
    provide: {};
    expose: string;
    __typeProps: unknown;
    __typeEmits: unknown;
    __typeRefs: {};
    __typeEl: any;
    __defaults: unknown;
}>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
"
`;

exports[`vue-tsc-dts > Input: ts-component/PropDefinitions.ts, Output: ts-component/PropDefinitions.d.ts 1`] = `
"export interface MyProps {
    /**
     * string foo
     */
    foo: string;
    /**
     * optional number bar
     */
    bar?: number;
}
"
`;

exports[`vue-tsc-dts > Input: ts-component/component.ts, Output: ts-component/component.d.ts 1`] = `undefined`;

exports[`vue-tsc-dts > Input: ts-component/component.tsx, Output: ts-component/component.d.ts 1`] = `undefined`;

exports[`vue-tsc-dts > Input: ts-named-export/component.ts, Output: ts-named-export/component.d.ts 1`] = `
"export declare const Foo: import("vue").DefineSetupFnComponent<{
    foo: string;
}, string[], {}, {
    foo: string;
} & {
    [x: \`on\${Capitalize<string>}\`]: (...args: any[]) => any;
}, import("vue").PublicProps>;
export declare const Bar: import("vue").DefineSetupFnComponent<{
    bar?: number;
}, string[], {}, {
    bar?: number;
} & {
    [x: \`on\${Capitalize<string>}\`]: (...args: any[]) => any;
}, import("vue").PublicProps>;
"
`;
