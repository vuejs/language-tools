{
	"properties": {
		"vueCompilerOptions": {
			"type": "object",
			"properties": {
				"target": {
					"default": "auto",
					"enum": [
						"auto",
						2,
						2.7,
						3,
						3.3
					],
					"markdownDescription": "Target version of Vue."
				},
				"extensions": {
					"type": "array",
					"default": [ ".vue" ],
					"markdownDescription": "Valid file extensions that should be considered as regular Vue SFC, please note that you should not use this option separately for additional file extensions IDE support, see https://github.com/vuejs/language-tools/tree/master/extensions/vscode/README.md#custom-file-extensions."
				},
				"lib": {
					"default": "",
					"markdownDescription": "Specify module name for import regular types. (If empty, will use `@vue/runtime-dom` for target < 2.7, `vue` for target >= 2.7)"
				},
				"jsxSlots": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Generate slots type for `JSX.ElementChildrenAttribute`."
				},
				"strictTemplates": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Strict props, component type-checking in templates."
				},
				"skipTemplateCodegen": {
					"type": "boolean",
					"markdownDescription": "https://github.com/vuejs/language-tools/issues/577"
				},
				"nativeTags": {
					"type": "array",
					"default": [
						"div",
						"img",
						"..."
					],
					"markdownDescription": "List of valid intrinsic elements."
				},
				"dataAttributes": {
					"type": "array",
					"default": [ ],
					"markdownDescription": "A glob matcher array that should always avoid recognized as HTML Attributes and Component props."
				},
				"htmlAttributes": {
					"type": "array",
					"default": [ "aria-*" ],
					"markdownDescription": "A glob matcher array that should always be recognizing as HTML Attributes rather than Component props. Attribute name will never convert to camelize case."
				},
				"plugins": {
					"type": "array",
					"default": [ ],
					"markdownDescription": "Plugins to be used in the SFC compiler."
				},
				"hooks": {
					"type": "array",
					"markdownDescription": "https://github.com/vuejs/language-tools/pull/2217"
				},
				"optionsWrapper": {
					"type": "array",
					"default": [
						"(await import('vue')).defineComponent(",
						")"
					],
					"markdownDescription": "How to wrap option of `export default { ... }`? Default: `[\"(await import('vue')).default.extend(\", \")\"]` for target < 2.7, `[\"(await import('vue')).defineComponent(\", \")\"]` for target >= 2.7."
				},
				"macros": {
					"type": "object",
					"default": {
						"defineProps": [ "defineProps" ],
						"defineSlots": [ "defineSlots" ],
						"defineEmits": [ "defineEmits" ],
						"defineExpose": [ "defineExpose" ],
						"withDefaults": [ "withDefaults" ]
					}
				},
				"experimentalResolveStyleCssClasses": {
					"enum": [
						"scoped",
						"always",
						"never"
					],
					"markdownDescription": "https://github.com/vuejs/language-tools/issues/1038, https://github.com/vuejs/language-tools/issues/1121"
				},
				"experimentalUseElementAccessInTemplate": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "https://github.com/vuejs/language-tools/issues/997"
				},
				"experimentalModelPropName": {
					"type": "object",
					"default": {
						"": {
							"input": true
						},
						"value": {
							"input": { "type": "text" },
							"textarea": true,
							"select": true
						}
					},
					"markdownDescription": "https://github.com/vuejs/language-tools/issues/1969"
				},
				"experimentalAdditionalLanguageModules": {
					"type": "array",
					"markdownDescription": "https://github.com/vuejs/language-tools/pull/2267"
				},
				"experimentalDefinePropProposal": {
					"enum": [
						"kevinEdition",
						"johnsonEdition",
						false
					]
				}
			}
		}
	}
}
