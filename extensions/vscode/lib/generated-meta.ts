// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = 'Vue';
export const name = 'volar';
export const version = '3.0.0-beta.4';
export const displayName = 'Vue (Official)';
export const description = 'Language Support for Vue';
export const extensionId = `${publisher}.${name}`;

/**
 * Type union of all commands
 */
export type CommandKey = 'vue.action.restartServer';

/**
 * Commands map registed by `Vue.volar`
 */
export const commands = {
	/**
	 * %command.action.restartServer%
	 * @value `vue.action.restartServer`
	 */
	actionRestartServer: 'vue.action.restartServer',
} satisfies Record<string, CommandKey>;

/**
 * Type union of all configs
 */
export type ConfigKey =
	| 'vue.trace.server'
	| 'vue.server.includeLanguages'
	| 'vue.codeActions.askNewComponentName'
	| 'vue.suggest.componentNameCasing'
	| 'vue.suggest.propNameCasing'
	| 'vue.suggest.defineAssignment'
	| 'vue.autoInsert.dotValue'
	| 'vue.autoInsert.bracketSpacing'
	| 'vue.inlayHints.destructuredProps'
	| 'vue.inlayHints.missingProps'
	| 'vue.inlayHints.inlineHandlerLeading'
	| 'vue.inlayHints.optionsWrapper'
	| 'vue.inlayHints.vBindShorthand'
	| 'vue.format.template.initialIndent'
	| 'vue.format.script.initialIndent'
	| 'vue.format.style.initialIndent'
	| 'vue.format.wrapAttributes';

export interface ConfigKeyTypeMap {
	'vue.trace.server': 'off' | 'messages' | 'verbose';
	'vue.server.includeLanguages': string[];
	'vue.codeActions.askNewComponentName': boolean;
	'vue.suggest.componentNameCasing': 'preferKebabCase' | 'preferPascalCase' | 'alwaysKebabCase' | 'alwaysPascalCase';
	'vue.suggest.propNameCasing': 'preferKebabCase' | 'preferCamelCase' | 'alwaysKebabCase' | 'alwaysCamelCase';
	'vue.suggest.defineAssignment': boolean;
	'vue.autoInsert.dotValue': boolean;
	'vue.autoInsert.bracketSpacing': boolean;
	'vue.inlayHints.destructuredProps': boolean;
	'vue.inlayHints.missingProps': boolean;
	'vue.inlayHints.inlineHandlerLeading': boolean;
	'vue.inlayHints.optionsWrapper': boolean;
	'vue.inlayHints.vBindShorthand': boolean;
	'vue.format.template.initialIndent': boolean;
	'vue.format.script.initialIndent': boolean;
	'vue.format.style.initialIndent': boolean;
	'vue.format.wrapAttributes':
		| 'auto'
		| 'force'
		| 'force-aligned'
		| 'force-expand-multiline'
		| 'aligned-multiple'
		| 'preserve'
		| 'preserve-aligned';
}

export interface ConfigShorthandMap {
	traceServer: 'vue.trace.server';
	serverIncludeLanguages: 'vue.server.includeLanguages';
	codeActionsAskNewComponentName: 'vue.codeActions.askNewComponentName';
	suggestComponentNameCasing: 'vue.suggest.componentNameCasing';
	suggestPropNameCasing: 'vue.suggest.propNameCasing';
	suggestDefineAssignment: 'vue.suggest.defineAssignment';
	autoInsertDotValue: 'vue.autoInsert.dotValue';
	autoInsertBracketSpacing: 'vue.autoInsert.bracketSpacing';
	inlayHintsDestructuredProps: 'vue.inlayHints.destructuredProps';
	inlayHintsMissingProps: 'vue.inlayHints.missingProps';
	inlayHintsInlineHandlerLeading: 'vue.inlayHints.inlineHandlerLeading';
	inlayHintsOptionsWrapper: 'vue.inlayHints.optionsWrapper';
	inlayHintsVBindShorthand: 'vue.inlayHints.vBindShorthand';
	formatTemplateInitialIndent: 'vue.format.template.initialIndent';
	formatScriptInitialIndent: 'vue.format.script.initialIndent';
	formatStyleInitialIndent: 'vue.format.style.initialIndent';
	formatWrapAttributes: 'vue.format.wrapAttributes';
}

export interface ConfigShorthandTypeMap {
	traceServer: 'off' | 'messages' | 'verbose';
	serverIncludeLanguages: string[];
	codeActionsAskNewComponentName: boolean;
	suggestComponentNameCasing: 'preferKebabCase' | 'preferPascalCase' | 'alwaysKebabCase' | 'alwaysPascalCase';
	suggestPropNameCasing: 'preferKebabCase' | 'preferCamelCase' | 'alwaysKebabCase' | 'alwaysCamelCase';
	suggestDefineAssignment: boolean;
	autoInsertDotValue: boolean;
	autoInsertBracketSpacing: boolean;
	inlayHintsDestructuredProps: boolean;
	inlayHintsMissingProps: boolean;
	inlayHintsInlineHandlerLeading: boolean;
	inlayHintsOptionsWrapper: boolean;
	inlayHintsVBindShorthand: boolean;
	formatTemplateInitialIndent: boolean;
	formatScriptInitialIndent: boolean;
	formatStyleInitialIndent: boolean;
	formatWrapAttributes:
		| 'auto'
		| 'force'
		| 'force-aligned'
		| 'force-expand-multiline'
		| 'aligned-multiple'
		| 'preserve'
		| 'preserve-aligned';
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
	key: T;
	default: ConfigKeyTypeMap[T];
}

/**
 * Configs map registered by `Vue.volar`
 */
export const configs = {
	/**
	 * @key `vue.trace.server`
	 * @default `"off"`
	 * @type `string`
	 */
	traceServer: {
		key: 'vue.trace.server',
		default: 'off',
	} as ConfigItem<'vue.trace.server'>,
	/**
	 * @key `vue.server.includeLanguages`
	 * @default `["vue"]`
	 * @type `array`
	 */
	serverIncludeLanguages: {
		key: 'vue.server.includeLanguages',
		default: ['vue'],
	} as ConfigItem<'vue.server.includeLanguages'>,
	/**
	 * @key `vue.codeActions.askNewComponentName`
	 * @default `true`
	 * @type `boolean`
	 */
	codeActionsAskNewComponentName: {
		key: 'vue.codeActions.askNewComponentName',
		default: true,
	} as ConfigItem<'vue.codeActions.askNewComponentName'>,
	/**
	 * @key `vue.suggest.componentNameCasing`
	 * @default `"preferPascalCase"`
	 * @type `string`
	 */
	suggestComponentNameCasing: {
		key: 'vue.suggest.componentNameCasing',
		default: 'preferPascalCase',
	} as ConfigItem<'vue.suggest.componentNameCasing'>,
	/**
	 * @key `vue.suggest.propNameCasing`
	 * @default `"preferKebabCase"`
	 * @type `string`
	 */
	suggestPropNameCasing: {
		key: 'vue.suggest.propNameCasing',
		default: 'preferKebabCase',
	} as ConfigItem<'vue.suggest.propNameCasing'>,
	/**
	 * @key `vue.suggest.defineAssignment`
	 * @default `true`
	 * @type `boolean`
	 */
	suggestDefineAssignment: {
		key: 'vue.suggest.defineAssignment',
		default: true,
	} as ConfigItem<'vue.suggest.defineAssignment'>,
	/**
	 * @key `vue.autoInsert.dotValue`
	 * @default `false`
	 * @type `boolean`
	 */
	autoInsertDotValue: {
		key: 'vue.autoInsert.dotValue',
		default: false,
	} as ConfigItem<'vue.autoInsert.dotValue'>,
	/**
	 * @key `vue.autoInsert.bracketSpacing`
	 * @default `true`
	 * @type `boolean`
	 */
	autoInsertBracketSpacing: {
		key: 'vue.autoInsert.bracketSpacing',
		default: true,
	} as ConfigItem<'vue.autoInsert.bracketSpacing'>,
	/**
	 * @key `vue.inlayHints.destructuredProps`
	 * @default `false`
	 * @type `boolean`
	 */
	inlayHintsDestructuredProps: {
		key: 'vue.inlayHints.destructuredProps',
		default: false,
	} as ConfigItem<'vue.inlayHints.destructuredProps'>,
	/**
	 * @key `vue.inlayHints.missingProps`
	 * @default `false`
	 * @type `boolean`
	 */
	inlayHintsMissingProps: {
		key: 'vue.inlayHints.missingProps',
		default: false,
	} as ConfigItem<'vue.inlayHints.missingProps'>,
	/**
	 * @key `vue.inlayHints.inlineHandlerLeading`
	 * @default `false`
	 * @type `boolean`
	 */
	inlayHintsInlineHandlerLeading: {
		key: 'vue.inlayHints.inlineHandlerLeading',
		default: false,
	} as ConfigItem<'vue.inlayHints.inlineHandlerLeading'>,
	/**
	 * @key `vue.inlayHints.optionsWrapper`
	 * @default `false`
	 * @type `boolean`
	 */
	inlayHintsOptionsWrapper: {
		key: 'vue.inlayHints.optionsWrapper',
		default: false,
	} as ConfigItem<'vue.inlayHints.optionsWrapper'>,
	/**
	 * @key `vue.inlayHints.vBindShorthand`
	 * @default `false`
	 * @type `boolean`
	 */
	inlayHintsVBindShorthand: {
		key: 'vue.inlayHints.vBindShorthand',
		default: false,
	} as ConfigItem<'vue.inlayHints.vBindShorthand'>,
	/**
	 * @key `vue.format.template.initialIndent`
	 * @default `true`
	 * @type `boolean`
	 */
	formatTemplateInitialIndent: {
		key: 'vue.format.template.initialIndent',
		default: true,
	} as ConfigItem<'vue.format.template.initialIndent'>,
	/**
	 * @key `vue.format.script.initialIndent`
	 * @default `false`
	 * @type `boolean`
	 */
	formatScriptInitialIndent: {
		key: 'vue.format.script.initialIndent',
		default: false,
	} as ConfigItem<'vue.format.script.initialIndent'>,
	/**
	 * @key `vue.format.style.initialIndent`
	 * @default `false`
	 * @type `boolean`
	 */
	formatStyleInitialIndent: {
		key: 'vue.format.style.initialIndent',
		default: false,
	} as ConfigItem<'vue.format.style.initialIndent'>,
	/**
	 * @key `vue.format.wrapAttributes`
	 * @default `"auto"`
	 * @type `string`
	 */
	formatWrapAttributes: {
		key: 'vue.format.wrapAttributes',
		default: 'auto',
	} as ConfigItem<'vue.format.wrapAttributes'>,
};

export interface ScopedConfigKeyTypeMap {
	'trace.server': 'off' | 'messages' | 'verbose';
	'server.includeLanguages': string[];
	'codeActions.askNewComponentName': boolean;
	'suggest.componentNameCasing': 'preferKebabCase' | 'preferPascalCase' | 'alwaysKebabCase' | 'alwaysPascalCase';
	'suggest.propNameCasing': 'preferKebabCase' | 'preferCamelCase' | 'alwaysKebabCase' | 'alwaysCamelCase';
	'suggest.defineAssignment': boolean;
	'autoInsert.dotValue': boolean;
	'autoInsert.bracketSpacing': boolean;
	'inlayHints.destructuredProps': boolean;
	'inlayHints.missingProps': boolean;
	'inlayHints.inlineHandlerLeading': boolean;
	'inlayHints.optionsWrapper': boolean;
	'inlayHints.vBindShorthand': boolean;
	'format.template.initialIndent': boolean;
	'format.script.initialIndent': boolean;
	'format.style.initialIndent': boolean;
	'format.wrapAttributes':
		| 'auto'
		| 'force'
		| 'force-aligned'
		| 'force-expand-multiline'
		| 'aligned-multiple'
		| 'preserve'
		| 'preserve-aligned';
}

export const scopedConfigs = {
	scope: 'vue',
	defaults: {
		'trace.server': 'off',
		'server.includeLanguages': ['vue'],
		'codeActions.askNewComponentName': true,
		'suggest.componentNameCasing': 'preferPascalCase',
		'suggest.propNameCasing': 'preferKebabCase',
		'suggest.defineAssignment': true,
		'autoInsert.dotValue': false,
		'autoInsert.bracketSpacing': true,
		'inlayHints.destructuredProps': false,
		'inlayHints.missingProps': false,
		'inlayHints.inlineHandlerLeading': false,
		'inlayHints.optionsWrapper': false,
		'inlayHints.vBindShorthand': false,
		'format.template.initialIndent': true,
		'format.script.initialIndent': false,
		'format.style.initialIndent': false,
		'format.wrapAttributes': 'auto',
	} satisfies ScopedConfigKeyTypeMap,
};

export interface NestedConfigs {
	'vue': {
		'trace': {
			'server': 'off' | 'messages' | 'verbose';
		};
		'server': {
			'includeLanguages': string[];
		};
		'codeActions': {
			'askNewComponentName': boolean;
		};
		'suggest': {
			'componentNameCasing': 'preferKebabCase' | 'preferPascalCase' | 'alwaysKebabCase' | 'alwaysPascalCase';
			'propNameCasing': 'preferKebabCase' | 'preferCamelCase' | 'alwaysKebabCase' | 'alwaysCamelCase';
			'defineAssignment': boolean;
		};
		'autoInsert': {
			'dotValue': boolean;
			'bracketSpacing': boolean;
		};
		'inlayHints': {
			'destructuredProps': boolean;
			'missingProps': boolean;
			'inlineHandlerLeading': boolean;
			'optionsWrapper': boolean;
			'vBindShorthand': boolean;
		};
		'format': {
			'template': {
				'initialIndent': boolean;
			};
			'script': {
				'initialIndent': boolean;
			};
			'style': {
				'initialIndent': boolean;
			};
			'wrapAttributes':
				| 'auto'
				| 'force'
				| 'force-aligned'
				| 'force-expand-multiline'
				| 'aligned-multiple'
				| 'preserve'
				| 'preserve-aligned';
		};
	};
}

export interface NestedScopedConfigs {
	'trace': {
		'server': 'off' | 'messages' | 'verbose';
	};
	'server': {
		'includeLanguages': string[];
	};
	'codeActions': {
		'askNewComponentName': boolean;
	};
	'suggest': {
		'componentNameCasing': 'preferKebabCase' | 'preferPascalCase' | 'alwaysKebabCase' | 'alwaysPascalCase';
		'propNameCasing': 'preferKebabCase' | 'preferCamelCase' | 'alwaysKebabCase' | 'alwaysCamelCase';
		'defineAssignment': boolean;
	};
	'autoInsert': {
		'dotValue': boolean;
		'bracketSpacing': boolean;
	};
	'inlayHints': {
		'destructuredProps': boolean;
		'missingProps': boolean;
		'inlineHandlerLeading': boolean;
		'optionsWrapper': boolean;
		'vBindShorthand': boolean;
	};
	'format': {
		'template': {
			'initialIndent': boolean;
		};
		'script': {
			'initialIndent': boolean;
		};
		'style': {
			'initialIndent': boolean;
		};
		'wrapAttributes':
			| 'auto'
			| 'force'
			| 'force-aligned'
			| 'force-expand-multiline'
			| 'aligned-multiple'
			| 'preserve'
			| 'preserve-aligned';
	};
}
