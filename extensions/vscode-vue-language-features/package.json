{
	"private": true,
	"name": "volar",
	"version": "0.38.9",
	"repository": {
		"type": "git",
		"url": "https://github.com/johnsoncodehk/volar.git",
		"directory": "extensions/vscode-vue-language-features"
	},
	"sponsor": {
		"url": "https://github.com/sponsors/johnsoncodehk"
	},
	"icon": "images/icon.png",
	"displayName": "Vue Language Features (Volar)",
	"description": "Language support for Vue 3",
	"author": "johnsoncodehk",
	"publisher": "Vue",
	"engines": {
		"vscode": "^1.67.0"
	},
	"keywords": [
		"volar",
		"vue",
		"vue3",
		"ts",
		"typescript",
		"pug"
	],
	"activationEvents": [
		"onLanguage:vue",
		"onLanguage:markdown",
		"onLanguage:html",
		"onLanguage:javascript",
		"onLanguage:typescript",
		"onLanguage:javascriptreact",
		"onLanguage:typescriptreact",
		"onWebviewPanel:preview"
	],
	"main": "client",
	"browser": "dist/browser/client",
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "%workspaceTrust%",
			"restrictedConfigurations": [
				"typescript.tsdk",
				"typescript.tsserver.pluginPaths",
				"typescript.npm"
			]
		}
	},
	"contributes": {
		"configurationDefaults": {
			"[markdown]": {
				"editor.quickSuggestions": true
			}
		},
		"views": {
			"explorer": [
				{
					"id": "vueComponentPreview",
					"name": "Vue Component Preview",
					"type": "webview",
					"when": "volar.foundViteDir"
				}
			]
		},
		"jsonValidation": [
			{
				"fileMatch": "tsconfig.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "tsconfig.*.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "tsconfig-*.json",
				"url": "https://json.schemastore.org/tsconfig"
			},
			{
				"fileMatch": "typings.json",
				"url": "https://json.schemastore.org/typings"
			},
			{
				"fileMatch": ".bowerrc",
				"url": "https://json.schemastore.org/bowerrc"
			},
			{
				"fileMatch": ".babelrc",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": ".babelrc.json",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": "babel.config.json",
				"url": "https://json.schemastore.org/babelrc"
			},
			{
				"fileMatch": "jsconfig.json",
				"url": "https://json.schemastore.org/jsconfig"
			},
			{
				"fileMatch": "jsconfig.*.json",
				"url": "https://json.schemastore.org/jsconfig"
			},
			{
				"fileMatch": "tsconfig.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "tsconfig-*.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "tsconfig.*.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig-*.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			},
			{
				"fileMatch": "jsconfig.*.json",
				"url": "./schemas/vue-tsconfig.schema.json"
			}
		],
		"languages": [
			{
				"id": "vue",
				"extensions": [
					".vue"
				],
				"configuration": "./languages/vue-language-configuration.json"
			},
			{
				"id": "markdown",
				"configuration": "./languages/markdown-language-configuration.json"
			},
			{
				"id": "html",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "jade",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "plaintext",
				"configuration": "./languages/sfc-template-language-configuration.json"
			},
			{
				"id": "vue-injection-markdown"
			},
			{
				"id": "vue-directives"
			},
			{
				"id": "vue-interpolations"
			},
			{
				"id": "vue-sfc-style-variable-injection"
			}
		],
		"grammars": [
			{
				"language": "vue",
				"scopeName": "source.vue",
				"path": "./syntaxes/vue.tmLanguage.json",
				"embeddedLanguages": {
					"source.vue": "vue",
					"text": "plaintext",
					"text.html.derivative": "html",
					"text.html.markdown": "markdown",
					"text.pug": "jade",
					"source.css": "css",
					"source.css.scss": "scss",
					"source.css.less": "less",
					"source.sass": "sass",
					"source.stylus": "stylus",
					"source.postcss": "postcss",
					"source.js": "javascript",
					"source.ts": "typescript",
					"source.jsx": "javascriptreact",
					"source.tsx": "typescriptreact",
					"source.json": "json",
					"source.json.comments": "jsonc",
					"source.yaml": "yaml",
					"source.toml": "toml",
					"source.graphql": "graphql"
				}
			},
			{
				"language": "vue-injection-markdown",
				"scopeName": "markdown.vue.codeblock",
				"path": "./syntaxes/markdown-vue.json",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.vue": "vue",
					"source.vue": "vue",
					"text": "plaintext",
					"text.html.derivative": "html",
					"text.html.markdown": "markdown",
					"text.pug": "jade",
					"source.css": "css",
					"source.css.scss": "scss",
					"source.css.less": "less",
					"source.sass": "sass",
					"source.stylus": "stylus",
					"source.postcss": "postcss",
					"source.js": "javascript",
					"source.ts": "typescript",
					"source.jsx": "javascriptreact",
					"source.tsx": "typescriptreact",
					"source.json": "json",
					"source.json.comments": "jsonc",
					"source.yaml": "yaml",
					"source.toml": "toml",
					"source.graphql": "graphql"
				}
			},
			{
				"language": "vue-directives",
				"scopeName": "vue.directives",
				"path": "./syntaxes/vue-directives.json",
				"injectTo": [
					"source.vue",
					"text.html.markdown",
					"text.html.derivative",
					"text.pug"
				]
			},
			{
				"language": "vue-interpolations",
				"scopeName": "vue.interpolations",
				"path": "./syntaxes/vue-interpolations.json",
				"injectTo": [
					"source.vue",
					"text.html.markdown",
					"text.html.derivative",
					"text.pug"
				]
			},
			{
				"language": "vue-sfc-style-variable-injection",
				"scopeName": "vue.sfc.style.variable.injection",
				"path": "./syntaxes/vue-sfc-style-variable-injection.json",
				"injectTo": [
					"source.vue"
				]
			}
		],
		"breakpoints": [
			{
				"language": "vue"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Volar",
			"properties": {
				"volar-language-features.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"volar-language-features-2.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"volar-document-features.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"volar.vueserver.useSecondServer": {
					"type": "boolean",
					"default": false,
					"description": "Use second server to progress heavy diagnostic works, the main server workhorse computing intellisense, operations such as auto-complete can respond faster. Note that this will lead to more memory usage."
				},
				"volar.vueserver.maxOldSpaceSize": {
					"type": [
						"number",
						"null"
					],
					"default": null,
					"description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it."
				},
				"volar.codeLens.references": {
					"type": "boolean",
					"default": true,
					"description": "[references] code lens."
				},
				"volar.codeLens.pugTools": {
					"type": "boolean",
					"default": false,
					"description": "[pug ☐] code lens."
				},
				"volar.icon.splitEditors": {
					"type": "boolean",
					"default": true,
					"description": "Show split editor icon in title area of editor."
				},
				"volar.icon.preview": {
					"type": "boolean",
					"default": true,
					"description": "Show Vite / Nuxt App preview icon."
				},
				"volar.codeLens.scriptSetupTools": {
					"type": "boolean",
					"default": false,
					"description": "[ref sugar ☐] code lens."
				},
				"volar.autoWrapParentheses": {
					"type": "boolean",
					"default": true,
					"description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520."
				},
				"volar.autoCompleteRefs": {
					"type": "boolean",
					"default": false,
					"description": "Auto-complete Ref value with `.value`."
				},
				"volar.takeOverMode.enabled": {
					"type": [
						"boolean",
						"string"
					],
					"enum": [
						"auto",
						true,
						false
					],
					"enumDescriptions": [
						"Auto enable take over mode when built-in TS extension disabled.",
						"Alway enable take over mode.",
						"Never enable take over mode."
					],
					"default": "auto",
					"description": "Take over language support for *.ts."
				},
				"volar.completion.preferredTagNameCase": {
					"type": "string",
					"enum": [
						"auto",
						"both",
						"kebab",
						"pascal"
					],
					"enumDescriptions": [
						"Auto Detect from Content",
						"<kebab-case> and <PascalCase>",
						"<kebab-case>",
						"<PascalCase>"
					],
					"default": "auto",
					"description": "Preferred tag name case."
				},
				"volar.completion.preferredAttrNameCase": {
					"type": "string",
					"enum": [
						"auto-kebab",
						"auto-camel",
						"kebab",
						"camel"
					],
					"enumDescriptions": [
						"Auto Detect from Content (Preferred :kebab-case=\"...\")",
						"Auto Detect from Content (Preferred :camelCase=\"...\")",
						":kebab-case=\"...\"",
						":camelCase=\"...\""
					],
					"default": "auto-kebab",
					"description": "Preferred attr name case."
				},
				"volar.completion.autoImportComponent": {
					"type": "boolean",
					"default": true,
					"description": "Enabled auto-import for component with tag completion."
				},
				"volar.preview.script.vite": {
					"type": "string",
					"default": "node {VITE_BIN} --port={PORT}"
				},
				"volar.preview.script.nuxi": {
					"type": "string",
					"default": "node {NUXI_BIN} dev --port {PORT}"
				},
				"volar.preview.port": {
					"type": "number",
					"default": 3333,
					"description": "Default port for component preview server."
				},
				"volar.preview.backgroundColor": {
					"type": "string",
					"default": "#f0f0f0",
					"description": "Component preview background color."
				},
				"volar.preview.transparentGrid": {
					"type": "boolean",
					"default": false,
					"description": "Component preview background style."
				},
				"volar.splitEditors.layout.left": {
					"type": "array",
					"default": [
						"script",
						"scriptSetup",
						"styles"
					]
				},
				"volar.splitEditors.layout.right": {
					"type": "array",
					"default": [
						"template",
						"customBlocks"
					]
				},
				"volar.updateImportsOnFileMove.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enabled update imports on file move."
				},
				"volar.diagnostics.delay": {
					"type": "number",
					"default": 200,
					"description": "Delay time for diagnostics."
				}
			}
		},
		"semanticTokenScopes": [
			{
				"language": "vue",
				"scopes": {
					"property": [
						"variable.other.property.vue"
					],
					"property.readonly": [
						"variable.other.constant.property.vue"
					],
					"variable": [
						"variable.other.readwrite.vue"
					],
					"variable.readonly": [
						"variable.other.constant.object.vue"
					],
					"function": [
						"entity.name.function.vue"
					],
					"namespace": [
						"entity.name.type.module.vue"
					],
					"variable.defaultLibrary": [
						"support.variable.vue"
					],
					"function.defaultLibrary": [
						"support.function.vue"
					],
					"componentTag": [
						"support.class.component.vue"
					]
				}
			},
			{
				"language": "markdown",
				"scopes": {
					"property": [
						"variable.other.property.vue"
					],
					"property.readonly": [
						"variable.other.constant.property.vue"
					],
					"variable": [
						"variable.other.readwrite.vue"
					],
					"variable.readonly": [
						"variable.other.constant.object.vue"
					],
					"function": [
						"entity.name.function.vue"
					],
					"namespace": [
						"entity.name.type.module.vue"
					],
					"variable.defaultLibrary": [
						"support.variable.vue"
					],
					"function.defaultLibrary": [
						"support.function.vue"
					],
					"componentTag": [
						"support.class.component.vue"
					]
				}
			},
			{
				"language": "html",
				"scopes": {
					"property": [
						"variable.other.property.vue"
					],
					"property.readonly": [
						"variable.other.constant.property.vue"
					],
					"variable": [
						"variable.other.readwrite.vue"
					],
					"variable.readonly": [
						"variable.other.constant.object.vue"
					],
					"function": [
						"entity.name.function.vue"
					],
					"namespace": [
						"entity.name.type.module.vue"
					],
					"variable.defaultLibrary": [
						"support.variable.vue"
					],
					"function.defaultLibrary": [
						"support.function.vue"
					],
					"componentTag": [
						"support.class.component.vue"
					]
				}
			}
		],
		"commands": [
			{
				"command": "volar.action.restartServer",
				"title": "Restart Vue server",
				"category": "Volar"
			},
			{
				"command": "volar.action.doctor",
				"title": "Show doctor panel (WIP)",
				"category": "Volar"
			},
			{
				"command": "volar.action.verifyAllScripts",
				"title": "Verify All Scripts",
				"category": "Volar"
			},
			{
				"command": "volar.action.writeVirtualFiles",
				"title": "Write Virtual Files",
				"category": "Volar (Debug)"
			},
			{
				"command": "volar.action.showCallGraph",
				"title": "Show Call Graph",
				"category": "Volar (Experimental)"
			},
			{
				"command": "volar.action.splitEditors",
				"title": "Split <script>, <template>, <style> Editors",
				"category": "Volar",
				"icon": "images/split-editors.png"
			},
			{
				"command": "volar.action.vite",
				"title": "Experimental Features for Vite",
				"category": "Volar",
				"icon": "images/vite-logo.svg"
			},
			{
				"command": "volar.action.nuxt",
				"title": "Experimental Features for Nuxt",
				"category": "Volar",
				"icon": "images/nuxt-logo.svg"
			},
			{
				"command": "volar.action.tagNameCase",
				"title": "Change Tag Name Case",
				"category": "Volar"
			},
			{
				"command": "volar.action.tagNameCase.convertToKebabCase",
				"title": "Convert Tag Name Case to kebab-case",
				"category": "Volar"
			},
			{
				"command": "volar.action.tagNameCase.convertToPascalCase",
				"title": "Convert Tag Name Case to PascalCase",
				"category": "Volar"
			},
			{
				"command": "volar.action.attrNameCase",
				"title": "Change Attr Name Case",
				"category": "Volar"
			},
			{
				"command": "volar.action.createWorkspaceSnippets",
				"title": "Create Workspace Snippets",
				"category": "Volar"
			},
			{
				"command": "volar.action.selectElement",
				"title": "Go to Code",
				"category": "Volar",
				"icon": "$(search)"
			},
			{
				"command": "volar.action.openInBrowser",
				"title": "Open in Browser",
				"category": "Volar",
				"icon": "$(link-external)"
			},
			{
				"command": "workbench.action.webview.reloadWebviewAction",
				"title": "Refresh",
				"category": "Volar",
				"icon": "$(refresh)"
			},
			{
				"command": "volar.selectTypeScriptVersion",
				"title": "Select TypeScript Version...",
				"category": "Volar"
			},
			{
				"command": "volar.vue.findAllFileReferences",
				"title": "Vue: Find File References",
				"category": "Volar"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "volar.action.restartServer",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.doctor",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.verifyAllScripts",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.writeVirtualFiles",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.showCallGraph",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.splitEditors",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.vite",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.nuxt",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.tagNameCase",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.tagNameCase.convertToKebabCase",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.tagNameCase.convertToPascalCase",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.attrNameCase",
					"when": "editorLangId == vue"
				},
				{
					"command": "volar.action.createWorkspaceSnippets",
					"when": "volar.activated"
				},
				{
					"command": "volar.action.selectElement",
					"when": "activeEditor == WebviewEditor"
				},
				{
					"command": "volar.action.openInBrowser",
					"when": "activeEditor == WebviewEditor"
				},
				{
					"command": "volar.selectTypeScriptVersion",
					"when": "volar.activated"
				}
			],
			"editor/title": [
				{
					"command": "volar.action.splitEditors",
					"when": "resourceLangId == vue && config.volar.icon.splitEditors",
					"group": "navigation"
				},
				{
					"command": "volar.action.vite",
					"when": "editorLangId == vue && config.volar.icon.preview && volar.foundViteDir",
					"group": "navigation"
				},
				{
					"command": "volar.action.nuxt",
					"when": "editorLangId == vue && config.volar.icon.preview && volar.foundNuxtDir",
					"group": "navigation"
				},
				{
					"command": "volar.action.selectElement",
					"when": "activeEditor == WebviewEditor",
					"group": "navigation"
				},
				{
					"command": "volar.action.openInBrowser",
					"when": "activeEditor == WebviewEditor",
					"group": "navigation"
				},
				{
					"command": "workbench.action.webview.reloadWebviewAction",
					"when": "activeEditor == WebviewEditor",
					"group": "navigation"
				}
			],
			"explorer/context": [
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == typescript",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == typescriptreact",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == javascript",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == javascriptreact",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == vue",
					"group": "4_search"
				},
				{
					"command": "volar.vue.findAllFileReferences",
					"when": "resourceLangId == html",
					"group": "4_search"
				}
			]
		},
		"problemMatchers": [
			{
				"name": "vite",
				"label": "Vite problems",
				"pattern": {
					"regexp": ""
				},
				"background": {
					"activeOnStart": true,
					"beginsPattern": "restarting server...$",
					"endsPattern": "\\s*ready in"
				}
			}
		]
	},
	"scripts": {
		"prebuild": "cd ../.. && npm run build",
		"build": "npm run build:node && npm run build:browser",
		"watch": "npm run build:node -- --watch & npm run build:browser -- --watch",
		"build:node": "node scripts/build-node",
		"build:browser": "node scripts/build-browser",
		"prepack:node": "npm run prebuild && npm run build:node -- --minify && npm run build:browser -- --empty",
		"prepack:browser": "npm run prebuild && npm run build:browser -- --minify && npm run build:node -- --empty",
		"pack:node": "npm run prepack:node && vsce package",
		"pack:browser": "npm run prepack:browser && vsce package",
		"release:node": "npm run prepack:node && vsce publish --target win32-x64 win32-ia32 win32-arm64 linux-x64 linux-arm64 linux-armhf darwin-x64 darwin-arm64 alpine-x64 alpine-arm64",
		"release:browser": "npm run prepack:browser && vsce publish --target web",
		"release": "npm run release:node && npm run release:browser"
	},
	"devDependencies": {
		"@types/semver": "^7.3.9",
		"@types/vscode": "1.67.0",
		"@volar/preview": "0.38.9",
		"@volar/shared": "0.38.9",
		"@volar/vue-language-server": "0.38.9",
		"@vue/compiler-sfc": "^3.2.37",
		"@vue/reactivity": "^3.2.37",
		"esbuild": "latest",
		"esbuild-plugin-copy": "latest",
		"path-browserify": "^1.0.1",
		"punycode": "^2.1.1",
		"semver": "^7.3.7",
		"vsce": "latest",
		"vscode-languageclient": "^8.0.1",
		"vscode-nls": "^5.0.1"
	}
}
